
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>js on 大国笔记</title>
   <link>https://franquil.github.io/tags/js/</link>
   <description>Recent content in js on 大国笔记</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>zh-cn</language>
   <lastBuildDate>Fri, 07 Aug 2020 08:30:19 +0800</lastBuildDate>
   
       <atom:link href="https://franquil.github.io/tags/js/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>构造器模式介绍和应用</title>
       <link>https://franquil.github.io/constructor-pattern-introduction-and-examples/</link>
       <pubDate>Fri, 07 Aug 2020 08:30:19 +0800</pubDate>
       
       <guid>https://franquil.github.io/constructor-pattern-introduction-and-examples/</guid>
       <description>&lt;p&gt;构造器（或构造者）模式(Constructor Pattern)是面向对象编程中一种最为常见的模式之一，属于一种创建型模式。其主要功能与目的在于初始化和构建一个对象。通常情况下，其会根据所传入的参数来对所构建的对象属性进行配置，有时也会根据内置默认的对象属性来构建对象。&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&#34;js&#34;&gt;构造器模式在JS中的示例&lt;/h2&gt;
&lt;p&gt;以JS为例，可以采用函数的方式来创建并返回一个对象。一个简单的构建器模式示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function constructAnObject(nameString) {
  const newObject = new Object()
  newObject.name = nameString || &#39;constructor&#39;
  newObject.introduceSelf = function() {
    console.log(&#39;I am a &#39; + this.name + &#39; pattern example.&#39;)
  }
  return newObject
}

const myObject = new constructAnObject(&#39;constructor&#39;)
myObject.introduceSelf()
// 输出： &amp;quot;I am a constructor pattern example.&amp;quot;

console.log(myObject.name)
// 输出：&amp;quot;constructor&amp;quot;

&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;
&lt;h2 id=&#34;protyotype&#34;&gt;采用&#39;protyotype&#39;方式实现构建器模式&lt;/h2&gt;
&lt;p&gt;除去采用函数方式外，相似地，利用&#39;prototype&#39;方式也可以很容易实现构建器模式。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function constructAnObject(nameString) {                                                            
    this.name = nameString || &#39;constructor&#39;
}                                                                                                   

constructAnObject.prototype.introduceSelf = function() {
   console.log(&#39;I am a &#39; + this.name + &#39; pattern example.&#39;)
}

const myObject = new constructAnObject(&#39;constructor&#39;) 

myObject.introduceSelf()                                                                            
// 输出： &amp;quot;I am a constructor pattern example.&amp;quot;                                                                                                   
console.log(myObject.name)                                                                          
// 输出：&amp;quot;constructor&amp;quot;    

&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;
&lt;h2 id=&#34;class&#34;&gt;采用&#39;class&#39;方式实现构建器模式&lt;/h2&gt;
&lt;p&gt;在ES6标准中，JS支持采用&#39;class&#39;的方式来构建对象。所以，上面的构建器模式可以采用如下方式构建：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class constructAnObject {
  constructor(nameString) {
    this.name = nameString || &#39;constructor&#39;
  }
  introduceSelf() {
    console.log(&#39;I am a &#39; + this.name + &#39; pattern example.&#39;)
  }
}

const myObject = new constructAnObject(&#39;constructor&#39;)
myObject.introduceSelf()
console.log(myObject.name)

&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;
&lt;h2 id=&#34;heading&#34;&gt;构建器模式图示&lt;/h2&gt;
&lt;p&gt;构建器模式可以用下图来进行表示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://franquil.github.io/images/constructor-pattern.jpg&#34; alt=&#34;构建器模式-constructor-pattern&#34; title=&#34;构建器模式图示&#34;&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;构建器模式可以说是面向对象编程语言中最为常见、最为通用和简单的构建对象方式之一。本文以JS为例，对该模式进行了简要的介绍和实现方式的演示，其在其它编程语言中虽会有语法上的差异，但原理上可以说是一样的。该模式主要功能是，通过构建函数并根据用户所提供的参数来构成一个可操作的功能对象，将构建器（函数或类）内的功能进行差异化的设定，以便之后按照用户要求进行执行。&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming&#34;&gt;https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://addyosmani.com/resources/essentialjsdesignpatterns/book/#constructorpatternjavascript&#34;&gt;Learning JavaScript Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&#34;&gt;Classes Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
 </channel>
</rss>
